enum zjump {
  zJDONT,
  zJGT,
  zJEQ,
  zJGE,
  zJLT,
  zJNE,
  zJLE,
  zJMP
}

enum zarithmetic_op {
  zC_ZERO,
  zC_ONE,
  zC_MINUSONE,
  zC_D,
  zC_A,
  zC_NOT_D,
  zC_NOT_A,
  zC_NEG_D,
  zC_NEG_A,
  zC_D_ADD_1,
  zC_A_ADD_1,
  zC_D_SUB_1,
  zC_A_SUB_1,
  zC_D_ADD_A,
  zC_D_SUB_A,
  zC_A_SUB_D,
  zC_D_AND_A,
  zC_D_OR_A
}

union zinstr {
  zAINST: %bv16,
  zCINST: (%bv1, %enum zarithmetic_op, (%bool, %bool, %bool), %enum zjump)
}

union zoption {
  zNone: %unit,
  zSomez3z5unionz0zzinstr: %union zinstr
}

val znot_bool = "not" : (%bool) ->  %bool

val zand_bool = "and_bool" : (%bool, %bool) ->  %bool

val zeq_int = "eq_int" : (%i, %i) ->  %bool

val zeq_bool = "eq_bool" : (%bool, %bool) ->  %bool

val zneq_int : (%i, %i) ->  %bool

fn zneq_int(zx, zy) {
  zgaz30_lz30 : %bool;
  zgaz30_lz30 = zeq_int(zx, zy);
  return = znot_bool(zgaz30_lz30);
  end;
}

val zlteq_int = "lteq" : (%i, %i) ->  %bool

val zgteq_int = "gteq" : (%i, %i) ->  %bool

val zlt_int = "lt" : (%i, %i) ->  %bool

val zgt_int = "gt" : (%i, %i) ->  %bool

val zeq_bits = "eq_bits" : (%bv, %bv) ->  %bool

val zbitvector_length = "length" : (%bv) ->  %i

val zsail_zzero_extend = "zero_extend" : (%bv, %i) ->  %bv

val ztruncate = "sail_truncate" : (%bv, %i) ->  %bv

val zsail_mask : (%i, %bv) ->  %bv

fn zsail_mask(zlen, zv) {
  zgaz32_lz30 : %bool;
  zgaz31_lz31 : %i;
  zgaz31_lz31 = zbitvector_length(zv);
  zgaz32_lz30 = zlteq_int(zlen, zgaz31_lz31);
  jump zgaz32_lz30 goto 7 ` "/home/cfbolz/.opam/default/share/sail/lib/vector_dec.sail 81:29 - 81:100";
  return = zsail_zzero_extend(zv, zlen);
  goto 8;
  return = ztruncate(zv, zlen);
  end;
}

val zappend_64 = "append_64" : (%bv, %bv64) ->  %bv

val zadd_bits = "add_bits" : (%bv, %bv) ->  %bv

val zadd_bits_int = "add_bits_int" : (%bv, %i) ->  %bv

val zsub_bits = "sub_bits" : (%bv, %bv) ->  %bv

val znot_vec = "not_bits" : (%bv) ->  %bv

val zand_vec = "and_bits" : (%bv, %bv) ->  %bv

val zor_vec = "or_bits" : (%bv, %bv) ->  %bv

val zsubrange_bits = "vector_subrange" : (%bv, %i, %i) ->  %bv

val zzzzz7ordzzJzzKdecz3sail_shiftleft = "shiftl" : (%bv, %i) ->  %bv

val zsail_zzeros = "zeros" : (%i) ->  %bv

val zsail_ones : (%i) ->  %bv

fn zsail_ones(zn) {
  zgaz33_lz30 : %bv;
  zgaz33_lz30 = zsail_zzeros(zn);
  return = znot_vec(zgaz33_lz30);
  end;
}

val zsigned = "sail_signed" : (%bv) ->  %i

val zadd_atom = "add_int" : (%i, %i) ->  %i

val zsub_atom = "sub_int" : (%i, %i) ->  %i

val zmult_atom = "mult_int" : (%i, %i) ->  %i

val ztdiv_int = "tdiv_int" : (%i, %i) ->  %i

val zfdiv_int : (%i, %i) ->  %i

fn zfdiv_int(zn, zm) {
  zgaz35_lz30 : %bool;
  zgaz34_lz314 : %bool;
  zgsz30_lz317 : %i = 0;
  zgaz34_lz314 = zlt_int(zn, zgsz30_lz317);
  zgsz31_lz315 : %bool;
  jump zgaz34_lz314 goto 8 ` "/home/cfbolz/.opam/default/share/sail/lib/arith.sail 113:5 - 113:18";
  zgsz31_lz315 = false;
  goto 10;
  zgsz32_lz316 : %i = 0;
  zgsz31_lz315 = zgt_int(zm, zgsz32_lz316);
  zgaz35_lz30 = zgsz31_lz315;
  jump zgaz35_lz30 goto 34 ` "/home/cfbolz/.opam/default/share/sail/lib/arith.sail 113:2 - 119:3";
  zgaz39_lz35 : %bool;
  zgaz38_lz310 : %bool;
  zgsz33_lz313 : %i = 0;
  zgaz38_lz310 = zgt_int(zn, zgsz33_lz313);
  zgsz34_lz311 : %bool;
  jump zgaz38_lz310 goto 20 ` "/home/cfbolz/.opam/default/share/sail/lib/arith.sail 115:12 - 115:25";
  zgsz34_lz311 = false;
  goto 22;
  zgsz35_lz312 : %i = 0;
  zgsz34_lz311 = zlt_int(zm, zgsz35_lz312);
  zgaz39_lz35 = zgsz34_lz311;
  jump zgaz39_lz35 goto 26 ` "/home/cfbolz/.opam/default/share/sail/lib/arith.sail 115:9 - 119:3";
  return = ztdiv_int(zn, zm);
  goto 33;
  zgaz311_lz36 : %i;
  zgaz310_lz38 : %i;
  zgsz36_lz39 : %i = 1;
  zgaz310_lz38 = zsub_atom(zn, zgsz36_lz39);
  zgaz311_lz36 = ztdiv_int(zgaz310_lz38, zm);
  zgsz37_lz37 : %i = 1;
  return = zsub_atom(zgaz311_lz36, zgsz37_lz37);
  goto 41;
  zgaz37_lz31 : %i;
  zgaz36_lz33 : %i;
  zgsz38_lz34 : %i = 1;
  zgaz36_lz33 = zadd_atom(zn, zgsz38_lz34);
  zgaz37_lz31 = ztdiv_int(zgaz36_lz33, zm);
  zgsz39_lz32 : %i = 1;
  return = zsub_atom(zgaz37_lz31, zgsz39_lz32);
  end;
}

val zsub_vec = "sub_bits" : (%bv, %bv) ->  %bv

val zbits1_to_bool : (%bv1) ->  %bool

fn zbits1_to_bool(zb) {
  zgsz310_lz30 : %bool;
  zb__0_lz33 : %bv1;
  zb__0_lz33 = zb;
  zgsz311_lz34 : %bool;
  zgsz311_lz34 = @eq(zb__0_lz33, 0b1);
  jump @not(zgsz311_lz34) goto 7 ` "nand2tetris.sail 13:27 - 16:1";
  goto 8;
  goto 10;
  zgsz310_lz30 = true;
  goto 20;
  zb__1_lz31 : %bv1;
  zb__1_lz31 = zb;
  zgsz312_lz32 : %bool;
  zgsz312_lz32 = @eq(zb__1_lz31, 0b0);
  jump @not(zgsz312_lz32) goto 16 ` "nand2tetris.sail 13:27 - 16:1";
  goto 17;
  goto 19;
  zgsz310_lz30 = false;
  goto 20;
  failure;
  return = zgsz310_lz30;
  end;
}

val zwrite_mem = "my_write_mem" : (%bv16, %bv16) ->  %unit

val zread_mem = "my_read_mem" : (%bv16) ->  %bv16

val zread_rom = "my_read_rom" : (%bv16) ->  %bv16

val zprint_debug = "my_print_debug" : (%bv64, %bv16, %bv16, %bv16) ->  %unit

register zPC : %bv16

register zA : %bv16

register zD : %bv16

val zdecode_compute_backwards : (%bv6) ->  %enum zarithmetic_op

fn zdecode_compute_backwards(zargz3) {
  zgsz313_lz30 : %enum zarithmetic_op;
  zb__0_lz335 : %bv6;
  zb__0_lz335 = zargz3;
  zgsz314_lz336 : %bool;
  zgsz314_lz336 = @eq(zb__0_lz335, 0b101010);
  jump @not(zgsz314_lz336) goto 7 ` "unknown location";
  goto 8;
  goto 10;
  zgsz313_lz30 = zC_ZERO;
  goto 164;
  zb__1_lz333 : %bv6;
  zb__1_lz333 = zargz3;
  zgsz315_lz334 : %bool;
  zgsz315_lz334 = @eq(zb__1_lz333, 0b111111);
  jump @not(zgsz315_lz334) goto 16 ` "unknown location";
  goto 17;
  goto 19;
  zgsz313_lz30 = zC_ONE;
  goto 164;
  zb__2_lz331 : %bv6;
  zb__2_lz331 = zargz3;
  zgsz316_lz332 : %bool;
  zgsz316_lz332 = @eq(zb__2_lz331, 0b111010);
  jump @not(zgsz316_lz332) goto 25 ` "unknown location";
  goto 26;
  goto 28;
  zgsz313_lz30 = zC_MINUSONE;
  goto 164;
  zb__3_lz329 : %bv6;
  zb__3_lz329 = zargz3;
  zgsz317_lz330 : %bool;
  zgsz317_lz330 = @eq(zb__3_lz329, 0b001100);
  jump @not(zgsz317_lz330) goto 34 ` "unknown location";
  goto 35;
  goto 37;
  zgsz313_lz30 = zC_D;
  goto 164;
  zb__4_lz327 : %bv6;
  zb__4_lz327 = zargz3;
  zgsz318_lz328 : %bool;
  zgsz318_lz328 = @eq(zb__4_lz327, 0b110000);
  jump @not(zgsz318_lz328) goto 43 ` "unknown location";
  goto 44;
  goto 46;
  zgsz313_lz30 = zC_A;
  goto 164;
  zb__5_lz325 : %bv6;
  zb__5_lz325 = zargz3;
  zgsz319_lz326 : %bool;
  zgsz319_lz326 = @eq(zb__5_lz325, 0b001101);
  jump @not(zgsz319_lz326) goto 52 ` "unknown location";
  goto 53;
  goto 55;
  zgsz313_lz30 = zC_NOT_D;
  goto 164;
  zb__6_lz323 : %bv6;
  zb__6_lz323 = zargz3;
  zgsz320_lz324 : %bool;
  zgsz320_lz324 = @eq(zb__6_lz323, 0b110001);
  jump @not(zgsz320_lz324) goto 61 ` "unknown location";
  goto 62;
  goto 64;
  zgsz313_lz30 = zC_NOT_A;
  goto 164;
  zb__7_lz321 : %bv6;
  zb__7_lz321 = zargz3;
  zgsz321_lz322 : %bool;
  zgsz321_lz322 = @eq(zb__7_lz321, 0b001111);
  jump @not(zgsz321_lz322) goto 70 ` "unknown location";
  goto 71;
  goto 73;
  zgsz313_lz30 = zC_NEG_D;
  goto 164;
  zb__8_lz319 : %bv6;
  zb__8_lz319 = zargz3;
  zgsz322_lz320 : %bool;
  zgsz322_lz320 = @eq(zb__8_lz319, 0b110011);
  jump @not(zgsz322_lz320) goto 79 ` "unknown location";
  goto 80;
  goto 82;
  zgsz313_lz30 = zC_NEG_A;
  goto 164;
  zb__9_lz317 : %bv6;
  zb__9_lz317 = zargz3;
  zgsz323_lz318 : %bool;
  zgsz323_lz318 = @eq(zb__9_lz317, 0b011111);
  jump @not(zgsz323_lz318) goto 88 ` "unknown location";
  goto 89;
  goto 91;
  zgsz313_lz30 = zC_D_ADD_1;
  goto 164;
  zb__10_lz315 : %bv6;
  zb__10_lz315 = zargz3;
  zgsz324_lz316 : %bool;
  zgsz324_lz316 = @eq(zb__10_lz315, 0b110111);
  jump @not(zgsz324_lz316) goto 97 ` "unknown location";
  goto 98;
  goto 100;
  zgsz313_lz30 = zC_A_ADD_1;
  goto 164;
  zb__11_lz313 : %bv6;
  zb__11_lz313 = zargz3;
  zgsz325_lz314 : %bool;
  zgsz325_lz314 = @eq(zb__11_lz313, 0b001110);
  jump @not(zgsz325_lz314) goto 106 ` "unknown location";
  goto 107;
  goto 109;
  zgsz313_lz30 = zC_D_SUB_1;
  goto 164;
  zb__12_lz311 : %bv6;
  zb__12_lz311 = zargz3;
  zgsz326_lz312 : %bool;
  zgsz326_lz312 = @eq(zb__12_lz311, 0b110010);
  jump @not(zgsz326_lz312) goto 115 ` "unknown location";
  goto 116;
  goto 118;
  zgsz313_lz30 = zC_A_SUB_1;
  goto 164;
  zb__13_lz39 : %bv6;
  zb__13_lz39 = zargz3;
  zgsz327_lz310 : %bool;
  zgsz327_lz310 = @eq(zb__13_lz39, 0b000010);
  jump @not(zgsz327_lz310) goto 124 ` "unknown location";
  goto 125;
  goto 127;
  zgsz313_lz30 = zC_D_ADD_A;
  goto 164;
  zb__14_lz37 : %bv6;
  zb__14_lz37 = zargz3;
  zgsz328_lz38 : %bool;
  zgsz328_lz38 = @eq(zb__14_lz37, 0b010011);
  jump @not(zgsz328_lz38) goto 133 ` "unknown location";
  goto 134;
  goto 136;
  zgsz313_lz30 = zC_D_SUB_A;
  goto 164;
  zb__15_lz35 : %bv6;
  zb__15_lz35 = zargz3;
  zgsz329_lz36 : %bool;
  zgsz329_lz36 = @eq(zb__15_lz35, 0b000111);
  jump @not(zgsz329_lz36) goto 142 ` "unknown location";
  goto 143;
  goto 145;
  zgsz313_lz30 = zC_A_SUB_D;
  goto 164;
  zb__16_lz33 : %bv6;
  zb__16_lz33 = zargz3;
  zgsz330_lz34 : %bool;
  zgsz330_lz34 = @eq(zb__16_lz33, 0b000000);
  jump @not(zgsz330_lz34) goto 151 ` "unknown location";
  goto 152;
  goto 154;
  zgsz313_lz30 = zC_D_AND_A;
  goto 164;
  zb__17_lz31 : %bv6;
  zb__17_lz31 = zargz3;
  zgsz331_lz32 : %bool;
  zgsz331_lz32 = @eq(zb__17_lz31, 0b010101);
  jump @not(zgsz331_lz32) goto 160 ` "unknown location";
  goto 161;
  goto 163;
  zgsz313_lz30 = zC_D_OR_A;
  goto 164;
  failure;
  return = zgsz313_lz30;
  end;
}

val zdecode_jump_backwards : (%bv3) ->  %enum zjump

fn zdecode_jump_backwards(zargz3) {
  zgsz332_lz30 : %enum zjump;
  zb__0_lz315 : %bv3;
  zb__0_lz315 = zargz3;
  zgsz333_lz316 : %bool;
  zgsz333_lz316 = @eq(zb__0_lz315, 0b000);
  jump @not(zgsz333_lz316) goto 7 ` "unknown location";
  goto 8;
  goto 10;
  zgsz332_lz30 = zJDONT;
  goto 74;
  zb__1_lz313 : %bv3;
  zb__1_lz313 = zargz3;
  zgsz334_lz314 : %bool;
  zgsz334_lz314 = @eq(zb__1_lz313, 0b001);
  jump @not(zgsz334_lz314) goto 16 ` "unknown location";
  goto 17;
  goto 19;
  zgsz332_lz30 = zJGT;
  goto 74;
  zb__2_lz311 : %bv3;
  zb__2_lz311 = zargz3;
  zgsz335_lz312 : %bool;
  zgsz335_lz312 = @eq(zb__2_lz311, 0b010);
  jump @not(zgsz335_lz312) goto 25 ` "unknown location";
  goto 26;
  goto 28;
  zgsz332_lz30 = zJEQ;
  goto 74;
  zb__3_lz39 : %bv3;
  zb__3_lz39 = zargz3;
  zgsz336_lz310 : %bool;
  zgsz336_lz310 = @eq(zb__3_lz39, 0b011);
  jump @not(zgsz336_lz310) goto 34 ` "unknown location";
  goto 35;
  goto 37;
  zgsz332_lz30 = zJGE;
  goto 74;
  zb__4_lz37 : %bv3;
  zb__4_lz37 = zargz3;
  zgsz337_lz38 : %bool;
  zgsz337_lz38 = @eq(zb__4_lz37, 0b100);
  jump @not(zgsz337_lz38) goto 43 ` "unknown location";
  goto 44;
  goto 46;
  zgsz332_lz30 = zJLT;
  goto 74;
  zb__5_lz35 : %bv3;
  zb__5_lz35 = zargz3;
  zgsz338_lz36 : %bool;
  zgsz338_lz36 = @eq(zb__5_lz35, 0b101);
  jump @not(zgsz338_lz36) goto 52 ` "unknown location";
  goto 53;
  goto 55;
  zgsz332_lz30 = zJNE;
  goto 74;
  zb__6_lz33 : %bv3;
  zb__6_lz33 = zargz3;
  zgsz339_lz34 : %bool;
  zgsz339_lz34 = @eq(zb__6_lz33, 0b110);
  jump @not(zgsz339_lz34) goto 61 ` "unknown location";
  goto 62;
  goto 64;
  zgsz332_lz30 = zJLE;
  goto 74;
  zb__7_lz31 : %bv3;
  zb__7_lz31 = zargz3;
  zgsz340_lz32 : %bool;
  zgsz340_lz32 = @eq(zb__7_lz31, 0b111);
  jump @not(zgsz340_lz32) goto 70 ` "unknown location";
  goto 71;
  goto 73;
  zgsz332_lz30 = zJMP;
  goto 74;
  failure;
  return = zgsz332_lz30;
  end;
}

val zdecode : (%bv16) ->  %union zoption

val zexecute : (%union zinstr) ->  %unit

val zdecode_destination : (%bv3) ->  (%bool, %bool, %bool)

fn zdecode_destination(zb) {
  zgsz341_lz30 : (%bool, %bool, %bool);
  zv__0_lz31 : %bv3;
  zv__0_lz31 = zb;
  za_lz32 : %bv1;
  za_lz32 = @slice::<1>(zv__0_lz31, 2);
  zm_lz33 : %bv1;
  zm_lz33 = @slice::<1>(zv__0_lz31, 0);
  zd_lz34 : %bv1;
  zd_lz34 = @slice::<1>(zv__0_lz31, 1);
  zashadowz30_lz35 : %bv1;
  zashadowz30_lz35 = @slice::<1>(zv__0_lz31, 2);
  zgaz312_lz36 : %bool;
  zgaz312_lz36 = zbits1_to_bool(zashadowz30_lz35);
  zgaz313_lz37 : %bool;
  zgaz313_lz37 = zbits1_to_bool(zd_lz34);
  zgaz314_lz38 : %bool;
  zgaz314_lz38 = zbits1_to_bool(zm_lz33);
  zgsz342_lz39 : (%bool, %bool, %bool);
  zgsz342_lz39.0 = zgaz312_lz36;
  zgsz342_lz39.1 = zgaz313_lz37;
  zgsz342_lz39.2 = zgaz314_lz38;
  zgsz341_lz30 = zgsz342_lz39;
  return = zgsz341_lz30;
  end;
}

fn zdecode(zmergez3var) {
  zgsz344_lz30 : %union zoption;
  zv__1_lz315 : %bv16;
  zv__1_lz315 = zmergez3var;
  zgaz317_lz316 : %bv1;
  zgaz317_lz316 = @slice::<1>(zv__1_lz315, 15);
  zgsz348_lz317 : %bool;
  zgsz348_lz317 = @eq(zgaz317_lz316, 0b0);
  jump @not(zgsz348_lz317) goto 9 ` "nand2tetris.sail 99:16 - 100:39";
  goto 10;
  goto 24;
  zx_lz318 : %bv15;
  zx_lz318 = @slice::<15>(zv__1_lz315, 0);
  zgaz316_lz319 : %union zinstr;
  zgaz315_lz321 : %bv16;
  zgsz345_lz322 : %bv = zx_lz318;
  zgsz346_lz323 : %i = 16;
  zgsz347_lz324 : %bv;
  zgsz347_lz324 = zsail_zzero_extend(zgsz345_lz322, zgsz346_lz323);
  zgaz315_lz321 = zgsz347_lz324;
  zgaz316_lz319 = zAINST(zgaz315_lz321);
  zgsz3113_lz320 : %union zinstr;
  zgsz3113_lz320 = zgaz316_lz319;
  zgsz344_lz30 = zSomez3z5unionz0zzinstr(zgsz3113_lz320);
  goto 61;
  zv__3_lz31 : %bv16;
  zv__3_lz31 = zmergez3var;
  zgaz323_lz32 : %bv3;
  zgaz323_lz32 = @slice::<3>(zv__3_lz31, 13);
  zgsz350_lz33 : %bool;
  zgsz350_lz33 = @eq(zgaz323_lz32, 0b111);
  jump @not(zgsz350_lz33) goto 32 ` "nand2tetris.sail 99:16 - 100:39";
  goto 33;
  goto 60;
  zjump_lz34 : %bv3;
  zjump_lz34 = @slice::<3>(zv__3_lz31, 0);
  zdest_lz35 : %bv3;
  zdest_lz35 = @slice::<3>(zv__3_lz31, 3);
  zc_lz36 : %bv6;
  zc_lz36 = @slice::<6>(zv__3_lz31, 6);
  za_lz37 : %bv1;
  za_lz37 = @slice::<1>(zv__3_lz31, 12);
  zgaz322_lz38 : %union zinstr;
  zgaz321_lz310 : (%bv1, %enum zarithmetic_op, (%bool, %bool, %bool), %enum zjump);
  zgaz318_lz311 : %enum zarithmetic_op;
  zgaz318_lz311 = zdecode_compute_backwards(zc_lz36);
  zgaz319_lz312 : (%bool, %bool, %bool);
  zgaz319_lz312 = zdecode_destination(zdest_lz35);
  zgaz320_lz313 : %enum zjump;
  zgaz320_lz313 = zdecode_jump_backwards(zjump_lz34);
  zgsz349_lz314 : (%bv1, %enum zarithmetic_op, (%bool, %bool, %bool), %enum zjump);
  zgsz349_lz314.0 = za_lz37;
  zgsz349_lz314.1 = zgaz318_lz311;
  zgsz349_lz314.2 = zgaz319_lz312;
  zgsz349_lz314.3 = zgaz320_lz313;
  zgaz321_lz310 = zgsz349_lz314;
  zgaz322_lz38 = zCINST(zgaz321_lz310);
  zgsz3114_lz39 : %union zinstr;
  zgsz3114_lz39 = zgaz322_lz38;
  zgsz344_lz30 = zSomez3z5unionz0zzinstr(zgsz3114_lz39);
  goto 61;
  zgsz344_lz30 = zNone(());
  return = zgsz344_lz30;
  end;
}

val zcompute_value : (%bv1, %enum zarithmetic_op) ->  %bv16

fn zcompute_value(za, zop) {
  zashadowz31_lz30 : %bv16;
  zgaz324_lz34 : %bool;
  zgaz324_lz34 = @eq(za, 0b0);
  jump zgaz324_lz34 goto 6 ` "nand2tetris.sail 124:10 - 124:45";
  zashadowz31_lz30 = zread_mem(zA);
  goto 7;
  zashadowz31_lz30 = zA;
  zd_lz31 : %bv16;
  zd_lz31 = zD;
  zresult_lz32 : %bv16;
  zgsz352_lz33 : %bv16;
  jump @neq(zC_ZERO, zop) goto 14 ` "nand2tetris.sail 127:4 - 127:10";
  zgsz352_lz33 = 0x0000;
  goto 66;
  jump @neq(zC_ONE, zop) goto 17 ` "nand2tetris.sail 128:4 - 128:9";
  zgsz352_lz33 = 0x0001;
  goto 66;
  jump @neq(zC_MINUSONE, zop) goto 20 ` "nand2tetris.sail 129:4 - 129:14";
  zgsz352_lz33 = 0xFFFF;
  goto 66;
  jump @neq(zC_D, zop) goto 23 ` "nand2tetris.sail 130:4 - 130:7";
  zgsz352_lz33 = zd_lz31;
  goto 66;
  jump @neq(zC_A, zop) goto 26 ` "nand2tetris.sail 131:4 - 131:7";
  zgsz352_lz33 = zashadowz31_lz30;
  goto 66;
  jump @neq(zC_NOT_D, zop) goto 29 ` "nand2tetris.sail 132:4 - 132:11";
  zgsz352_lz33 = @bvnot(zd_lz31);
  goto 66;
  jump @neq(zC_NOT_A, zop) goto 32 ` "nand2tetris.sail 133:4 - 133:11";
  zgsz352_lz33 = @bvnot(zashadowz31_lz30);
  goto 66;
  jump @neq(zC_NEG_D, zop) goto 35 ` "nand2tetris.sail 134:4 - 134:11";
  zgsz352_lz33 = @bvsub(0x0000, zd_lz31);
  goto 66;
  jump @neq(zC_NEG_A, zop) goto 38 ` "nand2tetris.sail 135:4 - 135:11";
  zgsz352_lz33 = @bvsub(0x0000, zashadowz31_lz30);
  goto 66;
  jump @neq(zC_D_ADD_1, zop) goto 41 ` "nand2tetris.sail 136:4 - 136:13";
  zgsz352_lz33 = @bvadd(zd_lz31, 0x0001);
  goto 66;
  jump @neq(zC_A_ADD_1, zop) goto 44 ` "nand2tetris.sail 137:4 - 137:13";
  zgsz352_lz33 = @bvadd(zashadowz31_lz30, 0x0001);
  goto 66;
  jump @neq(zC_D_SUB_1, zop) goto 47 ` "nand2tetris.sail 138:4 - 138:13";
  zgsz352_lz33 = @bvsub(zd_lz31, 0x0001);
  goto 66;
  jump @neq(zC_A_SUB_1, zop) goto 50 ` "nand2tetris.sail 139:4 - 139:13";
  zgsz352_lz33 = @bvsub(zashadowz31_lz30, 0x0001);
  goto 66;
  jump @neq(zC_D_ADD_A, zop) goto 53 ` "nand2tetris.sail 140:4 - 140:13";
  zgsz352_lz33 = @bvadd(zd_lz31, zashadowz31_lz30);
  goto 66;
  jump @neq(zC_D_SUB_A, zop) goto 56 ` "nand2tetris.sail 141:4 - 141:13";
  zgsz352_lz33 = @bvsub(zd_lz31, zashadowz31_lz30);
  goto 66;
  jump @neq(zC_A_SUB_D, zop) goto 59 ` "nand2tetris.sail 142:4 - 142:13";
  zgsz352_lz33 = @bvsub(zashadowz31_lz30, zd_lz31);
  goto 66;
  jump @neq(zC_D_AND_A, zop) goto 62 ` "nand2tetris.sail 143:4 - 143:13";
  zgsz352_lz33 = @bvand(zd_lz31, zashadowz31_lz30);
  goto 66;
  jump @neq(zC_D_OR_A, zop) goto 65 ` "nand2tetris.sail 144:4 - 144:12";
  zgsz352_lz33 = @bvor(zd_lz31, zashadowz31_lz30);
  goto 66;
  failure;
  zresult_lz32 = zgsz352_lz33;
  return = zresult_lz32;
  end;
}

val zassign_dest : ((%bool, %bool, %bool), %bv16) ->  %unit

fn zassign_dest(zgsz371, zvalue) {
  za_lz30 : %bool;
  za_lz30 = zgsz371.ztup0;
  zd_lz31 : %bool;
  zd_lz31 = zgsz371.ztup1;
  zm_lz32 : %bool;
  zm_lz32 = zgsz371.ztup2;
  zgsz373_lz34 : %unit;
  jump zm_lz32 goto 10 ` "nand2tetris.sail 150:4 - 150:38";
  zgsz373_lz34 = ();
  goto 11;
  zgsz373_lz34 = zwrite_mem(zA, zvalue);
  zgsz372_lz33 : %unit;
  jump za_lz30 goto 15 ` "nand2tetris.sail 151:4 - 151:28";
  zgsz372_lz33 = ();
  goto 17;
  zA = zvalue;
  zgsz372_lz33 = ();
  jump zd_lz31 goto 20 ` "nand2tetris.sail 152:4 - 152:28";
  return = ();
  goto 22;
  zD = zvalue;
  return = ();
  end;
}

val zmaybe_jump : (%bv16, %enum zjump) ->  %unit

fn zmaybe_jump(zvalue, zj) {
  zcond_lz30 : %bool;
  zgsz374_lz34 : %bool;
  jump @neq(zJDONT, zj) goto 5 ` "nand2tetris.sail 157:6 - 157:11";
  zgsz374_lz34 = false;
  goto 41;
  jump @neq(zJGT, zj) goto 10 ` "nand2tetris.sail 158:6 - 158:9";
  zgaz325_lz312 : %i64;
  zgaz325_lz312 = @signed::<64>(zvalue);
  zgsz374_lz34 = @gt(zgaz325_lz312, 0);
  goto 41;
  jump @neq(zJEQ, zj) goto 15 ` "nand2tetris.sail 159:6 - 159:9";
  zgaz326_lz311 : %i64;
  zgaz326_lz311 = @signed::<64>(zvalue);
  zgsz374_lz34 = @eq(zgaz326_lz311, 0);
  goto 41;
  jump @neq(zJGE, zj) goto 20 ` "nand2tetris.sail 160:6 - 160:9";
  zgaz327_lz310 : %i64;
  zgaz327_lz310 = @signed::<64>(zvalue);
  zgsz374_lz34 = @gteq(zgaz327_lz310, 0);
  goto 41;
  jump @neq(zJLT, zj) goto 25 ` "nand2tetris.sail 161:6 - 161:9";
  zgaz328_lz39 : %i64;
  zgaz328_lz39 = @signed::<64>(zvalue);
  zgsz374_lz34 = @lt(zgaz328_lz39, 0);
  goto 41;
  jump @neq(zJNE, zj) goto 32 ` "nand2tetris.sail 162:6 - 162:9";
  zgaz329_lz36 : %i64;
  zgaz329_lz36 = @signed::<64>(zvalue);
  zgsz382_lz37 : %i = 0;
  zgsz381_lz38 : %i = zgaz329_lz36;
  zgsz374_lz34 = zneq_int(zgsz381_lz38, zgsz382_lz37);
  goto 41;
  jump @neq(zJLE, zj) goto 37 ` "nand2tetris.sail 163:6 - 163:9";
  zgaz330_lz35 : %i64;
  zgaz330_lz35 = @signed::<64>(zvalue);
  zgsz374_lz34 = @lteq(zgaz330_lz35, 0);
  goto 41;
  jump @neq(zJMP, zj) goto 40 ` "nand2tetris.sail 164:6 - 164:9";
  zgsz374_lz34 = true;
  goto 41;
  failure;
  zcond_lz30 = zgsz374_lz34;
  jump zcond_lz30 goto 50 ` "nand2tetris.sail 166:4 - 166:46";
  zgsz385_lz31 : %bv = zPC;
  zgsz386_lz32 : %i = 1;
  zgsz387_lz33 : %bv;
  zgsz387_lz33 = zadd_bits_int(zgsz385_lz31, zgsz386_lz32);
  zPC = zgsz387_lz33;
  return = ();
  goto 52;
  zPC = zA;
  return = ();
  end;
}

fn zexecute(zmergez3var) {
  zgsz388_lz30 : %unit;
  jump zmergez3var is zAINST goto 14 ` "nand2tetris.sail 102:24 - 102:32";
  zx_lz37 : %bv16;
  zx_lz37 = zmergez3var as zAINST;
  zA = zx_lz37;
  zgsz389_lz311 : %unit;
  zgsz389_lz311 = ();
  zgsz390_lz38 : %bv = zPC;
  zgsz391_lz39 : %i = 1;
  zgsz392_lz310 : %bv;
  zgsz392_lz310 = zadd_bits_int(zgsz390_lz38, zgsz391_lz39);
  zPC = zgsz392_lz310;
  zgsz388_lz30 = ();
  goto 30;
  jump zmergez3var is zCINST goto 29 ` "nand2tetris.sail 169:24 - 169:48";
  za_lz31 : %bv1;
  za_lz31 = zmergez3var as zCINST.ztup0;
  zop_lz32 : %enum zarithmetic_op;
  zop_lz32 = zmergez3var as zCINST.ztup1;
  zdest_lz33 : (%bool, %bool, %bool);
  zdest_lz33 = zmergez3var as zCINST.ztup2;
  zjump_lz34 : %enum zjump;
  zjump_lz34 = zmergez3var as zCINST.ztup3;
  zvalue_lz35 : %bv16;
  zvalue_lz35 = zcompute_value(za_lz31, zop_lz32);
  zgsz394_lz36 : %unit;
  zgsz394_lz36 = zassign_dest(zdest_lz33, zvalue_lz35);
  zgsz388_lz30 = zmaybe_jump(zvalue_lz35, zjump_lz34);
  goto 30;
  failure;
  return = zgsz388_lz30;
  end;
}

val zfetch_decode_execute : (%unit) ->  %bool

fn zfetch_decode_execute(zgsz396) {
  zinstr_lz30 : %bv16;
  zinstr_lz30 = zread_rom(zPC);
  zx_lz31 : %union zoption;
  zx_lz31 = zdecode(zinstr_lz30);
  zcont_lz32 : %bool;
  zcont_lz32 = false;
  zgsz397_lz33 : %unit;
  jump zx_lz31 is zSomez3z5unionz0zzinstr goto 15 ` "nand2tetris.sail 183:8 - 183:19";
  zinstrshadowz32_lz35 : %union zinstr;
  zinstrshadowz32_lz35 = zx_lz31 as zSomez3z5unionz0zzinstr;
  zgsz398_lz36 : %unit;
  zgsz398_lz36 = zexecute(zinstrshadowz32_lz35);
  zcont_lz32 = true;
  zgsz397_lz33 = ();
  goto 20;
  jump zx_lz31 is zNone goto 19 ` "nand2tetris.sail 184:8 - 184:14";
  zcont_lz32 = false;
  zgsz397_lz33 = ();
  goto 20;
  failure;
  zgsz3101_lz34 : %unit;
  zgsz3101_lz34 = zgsz397_lz33;
  return = zcont_lz32;
  end;
}

val zrun : (%bv64) ->  %unit

fn zrun(zlimit) {
  zcycle_count_lz30 : %bv64;
  zcycle_count_lz30 = 0x0000000000000000;
  zcont_lz31 : %bool;
  zcont_lz31 = true;
  zgsz3108_lz32 : %bool;
  zgsz3109_lz33 : %unit;
  zgsz3108_lz32 = zcont_lz31;
  jump @not(zgsz3108_lz32) goto 37 ` "nand2tetris.sail 194:4 - 203:5";
  zcont_lz31 = false;
  zgsz3104_lz313 : %unit;
  zgsz3104_lz313 = ();
  zgsz3103_lz312 : %unit;
  zgsz3103_lz312 = zprint_debug(zcycle_count_lz30, zPC, zA, zD);
  zgaz331_lz37 : %bool;
  zgaz331_lz37 = zfetch_decode_execute(());
  zgsz3102_lz38 : %unit;
  jump zgaz331_lz37 goto 19 ` "nand2tetris.sail 197:8 - 201:9";
  zgsz3102_lz38 = ();
  goto 30;
  zgaz334_lz39 : %bool;
  zgaz332_lz310 : %i64;
  zgaz332_lz310 = @signed::<64>(zcycle_count_lz30);
  zgaz333_lz311 : %i64;
  zgaz333_lz311 = @signed::<64>(zlimit);
  zgaz334_lz39 = @lt(zgaz332_lz310, zgaz333_lz311);
  jump zgaz334_lz39 goto 28 ` "nand2tetris.sail 198:12 - 200:13";
  zgsz3102_lz38 = ();
  goto 30;
  zcont_lz31 = true;
  zgsz3102_lz38 = ();
  zgsz3105_lz34 : %bv = zcycle_count_lz30;
  zgsz3106_lz35 : %i = 1;
  zgsz3107_lz36 : %bv;
  zgsz3107_lz36 = zadd_bits_int(zgsz3105_lz34, zgsz3106_lz35);
  zcycle_count_lz30 = zgsz3107_lz36;
  zgsz3109_lz33 = ();
  goto 6;
  return = ();
  end;
}

val zmain : (%bv64) ->  %unit

fn zmain(zlimit) {
  zPC = 0x0000;
  zgsz3112_lz32 : %unit;
  zgsz3112_lz32 = ();
  zA = 0x0000;
  zgsz3111_lz31 : %unit;
  zgsz3111_lz31 = ();
  zD = 0x0000;
  zgsz3110_lz30 : %unit;
  zgsz3110_lz30 = ();
  return = zrun(zlimit);
  end;
}

